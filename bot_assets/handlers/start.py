from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram import Router, F
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    WebAppInfo,
    Message,
    InlineQueryResultArticle,
    InputTextMessageContent,
    InlineQuery,
    ChosenInlineResult,
    InputFile,
    BufferedInputFile,
    CallbackQuery
)
from configuration.config import API_BASE_URL
import aiohttp
from infrastructure.api_clients.city_client import APIClient
from utils import REGIONS, plot_flights_trend, get_top_10_by_total
from bot_assets.keyboards.inlines import get_main_kb
from typing import Dict


router = Router()


MEDALS = ["ü•á", "ü•à", "ü•â"] + ["  "] * 7  

def format_top_message(top_dict: Dict[int, int]) -> str:
    if not top_dict:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—ë—Ç–∞–º –ë–ü–õ–ê –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥."
    
    lines = []
    for i, (region_id, flights) in enumerate(top_dict.items(), 1):
        medal = MEDALS[i - 1] if i <= 3 else f"{i}."
        lines.append(f"{medal} ID {region_id} ‚Äî {flights} –ø–æ–ª—ë—Ç–æ–≤")
    
    return "üèÜ –¢–æ–ø-10 —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ë–ü–õ–ê:\n\n" + "\n".join(lines)


@router.inline_query()
async def inline_search(inline_query: InlineQuery):
    query = inline_query.query.strip().lower()

    if not REGIONS:
        await inline_query.answer(
            [InlineQueryResultArticle(
                id="error",
                title="–û—à–∏–±–∫–∞",
                description="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤",
                input_message_content=InputTextMessageContent(
                    message_text="–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                )
            )],
            cache_time=0
        )
        return

    filtered = [
        r for r in REGIONS
        if query in r["name"].lower()
    ]

    filtered = filtered[:50]

    results = []
    for region in filtered:
        capital_name = region["capital"]["name"] if region.get("capital") else "–ù–µ—Ç —Å—Ç–æ–ª–∏—Ü—ã"
        description = f"–°—Ç–æ–ª–∏—Ü–∞: {capital_name}"
        results.append(
            InlineQueryResultArticle(
                id=str(region["id"]),
                title=region["fullname"],
                description=description,
                input_message_content=InputTextMessageContent(
                    message_text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–≥–∏–æ–Ω: {region['name']}\n–°—Ç–æ–ª–∏—Ü–∞: {capital_name}"
                ),
                
            )
        )

    await inline_query.answer(results, cache_time=60, is_personal=True)


@router.chosen_inline_result()
async def on_region_selected(chosen_result: ChosenInlineResult):
    region_id = chosen_result.result_id
    user_id = chosen_result.from_user.id
    client = APIClient()
    region = client.get_region(region_id).get('data')
    statistic_of_region = client.get_statistic_of_region(region_id)
    image_bytes = plot_flights_trend(statistic_of_region['count_flights_by_months'])

    region_text = (
        f"üìç {region.get('fullname')} (ID: {region_id})\n\n"
        "üèÜ **–ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ**: #–ê –∫–∞–∫ –º—ã –µ–≥–æ —Å—á–∏—Ç–∞–µ–º? –æ—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å?  \n"
        "üìÖ **–ü–µ—Ä–∏–æ–¥**: –Ø–Ω–≤–∞—Ä—å‚Äì–ò—é–ª—å 2025  \n"
        f"üõ´ –í—Å–µ–≥–æ –ø–æ–ª—ë—Ç–æ–≤: {statistic_of_region.get('total_flights')}  \n\n"

        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {statistic_of_region.get('last_year').get('year')}  \n"
        f"üõ´ –ü–æ–ª—ë—Ç–æ–≤ –∑–∞ –≥–æ–¥: {statistic_of_region.get('last_year').get('flight_count')}  \n"
        f"‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {statistic_of_region.get('last_year').get('avg_flight_time')}  \n"
        f"{statistic_of_region.get('change_percent')}\n\n"
        "üè¢ **–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ä–≥–∞–Ω**:  \n"
        "–£ –ù–ê–° –¢–ê–ö–û–ï –ï–°–¢–¨???\n\n"
        f"üìå –°—Ç–æ–ª–∏—Ü–∞: {region.get('capital').get('name')}  \n"
        f"üó∫Ô∏è –¢–∏–ø: {region.get('type')}  \n"
        f"üë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ: {region.get('population')}"
    )
    await chosen_result.bot.send_message(
        chat_id=user_id,
        text=region_text
    )
    await chosen_result.bot.send_photo(
        chat_id=user_id,
        photo=BufferedInputFile(image_bytes.getvalue(), filename="flight_trend.png")
    )

    

@router.message(CommandStart())
async def start_message(message: Message):
    main_menu_text = (
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Aerostat Bot!\n\n"
        "–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—ë—Ç–æ–≤ –ë–ê–° –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –†–§ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –†–æ—Å–∞–≤–∏–∞—Ü–∏–∏.\n\n"
        "üîç –ù–∞–π–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:\n"
        "‚Üí –ù–∞–ø–∏—à–∏—Ç–µ /region –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π_–∫—Ä–∞–π  \n"
        "‚Üí –ò–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∏–Ω–ª–∞–π–Ω-–ø–æ–∏—Å–∫: @aerostat_bars_bot –†–µ–≥–∏–æ–Ω\n\n"
        "üìä –î–æ—Å—Ç—É–ø–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        "‚Ä¢ –û–±—â–µ–µ —á–∏—Å–ª–æ –ø–æ–ª—ë—Ç–æ–≤\n"
        "‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ –ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ\n"
        "‚Ä¢ –î–∏–Ω–∞–º–∏–∫–∞\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω—ã"
    )

    main_menu_kb = get_main_kb()
    await message.answer(main_menu_text, reply_markup=main_menu_kb)


@router.callback_query(F.data.startswith('top10'))
async def get_top(callback_query: CallbackQuery):
    try:
        top_10_dict = get_top_10_by_total()
        text = format_top_message(top_10_dict)
    except Exception as e:
        text = f"–ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
    
    await callback_query.answer(text)