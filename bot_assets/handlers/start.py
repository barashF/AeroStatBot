from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram import Router, F
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    WebAppInfo,
    Message,
    InlineQueryResultArticle,
    InputTextMessageContent,
    InlineQuery,
    ChosenInlineResult,
    InputFile,
    BufferedInputFile,
    CallbackQuery,
    FSInputFile
)
from configuration.config import API_BASE_URL
import aiohttp
from infrastructure.api_clients.city_client import APIClient
from infrastructure.api_clients.models import Statistic
from infrastructure.gen_image import generate_bas_usage_chart, generate_flights_cards, generate_regions_table, generate_flights_trend_chart
from utils import REGIONS, plot_flights_trend, get_top_10_by_total, RATING_REGIONS
from bot_assets.keyboards.inlines import get_main_kb, get_region_menu, get_list_regions, get_organizations
from bot_assets.states import Compare
from typing import Dict
import re
import os
import json
import numpy as np


router = Router()


MEDALS = ["ü•á", "ü•à", "ü•â"] + ["  "] * 7  

def format_top_message(top_dict: Dict[int, int]) -> str:
    if not top_dict:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—ë—Ç–∞–º –ë–ü–õ–ê –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥."
    
    lines = []
    for i, (region_id, flights) in enumerate(top_dict.items(), 1):
        medal = MEDALS[i - 1] if i <= 3 else f"{i}."
        lines.append(f"{medal} ID {region_id} ‚Äî {flights} –ø–æ–ª—ë—Ç–æ–≤")
    
    return "üèÜ –¢–æ–ø-10 —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ë–ü–õ–ê:\n\n" + "\n".join(lines)


@router.inline_query()
async def inline_search(inline_query: InlineQuery):
    query = inline_query.query.strip()
    frst_region = ''
    if query.startswith("compare"):
        mode = "compare"
        frst_region = int(query.split('_')[1])
        search_term = query[len("compare"):].strip().lower()
    else:
        mode = ""
        search_term = query.lower()

    if not REGIONS:
        await inline_query.answer(
            [InlineQueryResultArticle(
                id="error",
                title="–û—à–∏–±–∫–∞",
                description="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤",
                input_message_content=InputTextMessageContent(
                    message_text="–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                )
            )],
            cache_time=0
        )
        return

    
    filtered = [
        r for r in REGIONS
        if search_term in r["name"].lower() or search_term in r["fullname"].lower()
    ][:50]

    results = []
    for region in filtered:
        capital_name = region["capital"]["name"] if region.get("capital") else "–ù–µ—Ç —Å—Ç–æ–ª–∏—Ü—ã"
        description = f"–°—Ç–æ–ª–∏—Ü–∞: {capital_name}"

        if mode == "compare":
            message_text = f"/compare_region_{region['id']}_{frst_region}"
        else:
            message_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–≥–∏–æ–Ω: {region['fullname']}\n–°—Ç–æ–ª–∏—Ü–∞: {capital_name}"

        results.append(
            InlineQueryResultArticle(
                id=f"{region['id']}",
                title=region["fullname"],
                description=description,
                input_message_content=InputTextMessageContent(
                    message_text=message_text
                ),
            )
        )

    await inline_query.answer(results, cache_time=60, is_personal=True)


@router.chosen_inline_result()
async def on_region_selected(chosen_result: ChosenInlineResult):
    global RATING_REGIONS
    region_id = chosen_result.result_id

    user_id = chosen_result.from_user.id
    client = APIClient()
    region = client.get_region(region_id).get('data')
    statistic: Statistic = client.get_statistic(region_id)
    
    region_text = (
        f"üìç {statistic.name} (ID: {region_id})\n\n"
        f"üèÜ –ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {RATING_REGIONS.get(str(region_id))}  \n"
        f"üõ´ –í—Å–µ–≥–æ –ø–æ–ª—ë—Ç–æ–≤: {5932}  \n\n"
        
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {2025}  \n"
        f"üõ´ –ü–æ–ª—ë—Ç–æ–≤ –∑–∞ –≥–æ–¥: {1486}  \n"
        f"‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {'1:57:12'}  \n\n"
        
        "üè¢ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ä–≥–∞–Ω:  \n"
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ  –†–æ—Å–∞–≤–∏–∞—Ü–∏–∏ –ø–æ –°–ó–§–û\n\n"
        
        "üìå –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –ë–ê–°\n"
        "–ü—Ä–∏–Ω—è—Ç–∞ 20.12.2024\n"
        
        "üìå –ù–∞–ª–∏—á–∏–µ –≠–ü–†\n"
        "–ï—Å—Ç—å\n"
        
        "üìå –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–≥–∏–æ–Ω–∞\n"
        "–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö —Å –ë–í–°\n"
        
        "üìå –ù–∞–ª–∏—á–∏–µ —Ä–∞–±–æ—Ç –ø–æ –ë–≠–ö\n"
        "–ï—Å—Ç—å\n\n"
        
        "üìå –ù–∞–ª–∏—á–∏–µ –ø–æ–ª–∏–≥–æ–Ω–∞ –ë–ê–°\n"
        "–ï—Å—Ç—å\n"
        
        "üìå –ù–∞–ª–∏—á–∏–µ –ù–ü–¶\n"
        "–ö—Ä—É–ø–Ω—ã–π\n"
        
        "üìå –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Å–Ω–∞—â—ë–Ω–Ω–æ—Å—Ç–∏ —à–∫–æ–ª –ë–ê–°,\n"
        "12%\n"
        
        f"üìå –°—Ç–æ–ª–∏—Ü–∞: {region.get('capital').get('name')}  \n"
        f"üó∫Ô∏è –¢–∏–ø: {region.get('type')}  \n"
        f"üë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ: {region.get('population')}"
    )

    await chosen_result.bot.send_message(
        chat_id=user_id,
        text=region_text,
        reply_markup=get_region_menu(region_id)
    )
    # await chosen_result.bot.send_photo(
    #     chat_id=user_id,
    #     photo=BufferedInputFile(image_bytes.getvalue(), filename="flight_trend.png")
    # )

    

@router.message(CommandStart())
async def start_message(message: Message):
    main_menu_text = (
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Aerostat Bot!\n\n"
        "–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—ë—Ç–æ–≤ –ë–ê–° –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –†–§ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –†–æ—Å–∞–≤–∏–∞—Ü–∏–∏.\n\n"
        "üîç –ù–∞–π–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:\n"
        "‚Üí –ù–∞–ø–∏—à–∏—Ç–µ /region –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π_–∫—Ä–∞–π  \n"
        "‚Üí –ò–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∏–Ω–ª–∞–π–Ω-–ø–æ–∏—Å–∫: @aerostat_bars_bot –†–µ–≥–∏–æ–Ω\n\n"
        "üìä –î–æ—Å—Ç—É–ø–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        "‚Ä¢ –û–±—â–µ–µ —á–∏—Å–ª–æ –ø–æ–ª—ë—Ç–æ–≤\n"
        "‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ –ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ\n"
        "‚Ä¢ –î–∏–Ω–∞–º–∏–∫–∞\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω—ã"
    )

    main_menu_kb = get_main_kb()
    await message.answer(main_menu_text, reply_markup=main_menu_kb)


@router.callback_query(F.data.startswith('top10'))
async def get_top(callback_query: CallbackQuery):
    try:
        top_10_dict = get_top_10_by_total()
        text = format_top_message(top_10_dict)
    except Exception as e:
        text = f"–ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
    
    await callback_query.message.answer(text)


@router.callback_query(F.data.startswith('compare'))
async def compare(callback_query: CallbackQuery):
    first_region_id = int(callback_query.data.split('_')[1])
    await callback_query.message.edit_text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:")
    await callback_query.message.edit_reply_markup(reply_markup=get_list_regions(first_region_id))


@router.callback_query(F.data.startswith('voidcompare_'))
async def void_compare(callback_query: CallbackQuery):
    first, second = map(int, callback_query.data.split('_')[1:])

    
    client = APIClient()
    region_first = client.get_region(first).get('data')
    region_second = client.get_region(second).get('data')
    statistic_first: Statistic = client.get_statistic(first)
    statistic_second: Statistic = client.get_statistic(second)

    region_text = (
        f"üìç {statistic_first.name} // {statistic_second.name}\n\n"
        f"üèÜ –ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {RATING_REGIONS.get(str(first))} //  {RATING_REGIONS.get(str(second))}\n"
        f"üõ´ –í—Å–µ–≥–æ –ø–æ–ª—ë—Ç–æ–≤: {5932} // {4189}   \n\n"
        
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {2025}  \n"
        f"üõ´ –ü–æ–ª—ë—Ç–æ–≤ –∑–∞ –≥–æ–¥: {1486} // {943}  \n"
        f"‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {'1:57:12'} // {'1:23:42'}  \n\n"
        
        "üè¢ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ä–≥–∞–Ω:  \n"
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ  –†–æ—Å–∞–≤–∏–∞—Ü–∏–∏ –ø–æ –°–ó–§–û // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ  –†–æ—Å–∞–≤–∏–∞—Ü–∏–∏ –ø–æ –°–ó–§–û\n\n"
        
        "üìå –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –ë–ê–°\n"
        "–ü—Ä–∏–Ω—è—Ç–∞ 20.12.2024 // 11.02.2025\n"
        
        "üìå –ù–∞–ª–∏—á–∏–µ –≠–ü–†\n"
        "–ï—Å—Ç—å // –ï—Å—Ç—å\n"
        
        "üìå –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–≥–∏–æ–Ω–∞\n"
        "–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö —Å –ë–í–° // –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö —Å –ë–í–°\n"
        
        "üìå –ù–∞–ª–∏—á–∏–µ —Ä–∞–±–æ—Ç –ø–æ –ë–≠–ö\n"
        "–ï—Å—Ç—å // –ï—Å—Ç—å\n\n"
        
        "üìå –ù–∞–ª–∏—á–∏–µ –ø–æ–ª–∏–≥–æ–Ω–∞ –ë–ê–°\n"
        "–ï—Å—Ç—å // –ï—Å—Ç—å\n"
        
        "üìå –ù–∞–ª–∏—á–∏–µ –ù–ü–¶\n"
        "–ö—Ä—É–ø–Ω—ã–π // –ö—Ä—É–ø–Ω—ã–π\n"
        
        "üìå –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Å–Ω–∞—â—ë–Ω–Ω–æ—Å—Ç–∏ —à–∫–æ–ª –ë–ê–°,\n"
        "12% // 11%\n\n"
        
        f"üë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ: {region_first.get('population')} // {region_second.get('population')}"
    )
    await callback_query.message.answer(text=region_text, reply_markup=get_region_menu(first))


@router.callback_query(F.data.startswith('usebas'))
async def use_bas(callback_query: CallbackQuery):
    region_id = int(callback_query.data.split('_')[1])
    # bas_data = {
    #     "–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ": 25,
    #     "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∞": 20,
    #     "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞": 15,
    #     "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å": 10,
    #     "–ù–∞—É–∫–∞ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": 10,
    #     "–≠–∫–æ–ª–æ–≥–∏—è –∏ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã": 10,
    #     "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –≥–æ—Å—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": 5,
    #     "–ú–µ–¥–∏–∞ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏": 5
    # }
    # chart_image = generate_bas_usage_chart(bas_data)
    current_dir = os.path.dirname(__file__)
    image_path = os.path.join(current_dir, "bas.png")
    await callback_query.message.answer_photo(
        photo=FSInputFile(image_path), filename="flight_trend.png")
    await callback_query.message.answer(text="üìä –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ë–ê–° –≤ —Ä–µ–≥–∏–æ–Ω–µ", reply_markup=get_region_menu(region_id))


@router.callback_query(F.data.startswith('last_flights'))
async def last_flights(callback_query: CallbackQuery):
    current_dir = os.path.dirname(__file__)
    image_path = os.path.join(current_dir, "6_flights.png")
    await callback_query.message.answer_photo(
        photo=FSInputFile(image_path),
        caption="üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 –ø–æ–ª—ë—Ç–æ–≤"
    )


@router.callback_query(F.data.startswith('table_regions'))
async def get_table_regions(callback_query: CallbackQuery):
    text = """üìä –¢–û–ü-15 –†–ï–ì–ò–û–ù–û–í –ü–û –ê–ö–¢–ò–í–ù–û–°–¢–ò –ë–ü–õ–ê

    ‚Äî

    ü•á #1 –ú–æ—Å–∫–≤–∞  
    ‚Ä¢ –ü–æ–ª—ë—Ç—ã: 3‚ÄØ200  
    ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5‚ÄØ100 —á  
    ‚Ä¢ –°—Ä. –≤—Ä–µ–º—è: 0.95 —á  
    ‚Ä¢ –†–æ—Å—Ç: +12% üü¢  
    ‚Ä¢ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 72

    ‚Äî

    ü•à #2 –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω  
    ‚Ä¢ –ü–æ–ª—ë—Ç—ã: 2‚ÄØ800  
    ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5‚ÄØ100 —á  
    ‚Ä¢ –°—Ä. –≤—Ä–µ–º—è: 0.95 —á  
    ‚Ä¢ –†–æ—Å—Ç: -5% üî¥  
    ‚Ä¢ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 72

    ‚Äî

    ü•â #3 –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π  
    ‚Ä¢ –ü–æ–ª—ë—Ç—ã: 2‚ÄØ500  
    ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5‚ÄØ100 —á  
    ‚Ä¢ –°—Ä. –≤—Ä–µ–º—è: 0.95 —á  
    ‚Ä¢ –†–æ—Å—Ç: +8% üü¢  
    ‚Ä¢ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 72

    ‚Äî

    üî• #4 –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å  
    ‚Ä¢ –ü–æ–ª—ë—Ç—ã: 2‚ÄØ200  
    ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5‚ÄØ100 —á  
    ‚Ä¢ –°—Ä. –≤—Ä–µ–º—è: 0.95 —á  
    ‚Ä¢ –†–æ—Å—Ç: +15% üü¢  
    ‚Ä¢ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 72

    ‚Äî

    üìç #5 –°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å  
    ‚Ä¢ –ü–æ–ª—ë—Ç—ã: 2‚ÄØ000  
    ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5‚ÄØ100 —á  
    ‚Ä¢ –°—Ä. –≤—Ä–µ–º—è: 0.95 —á  
    ‚Ä¢ –†–æ—Å—Ç: -3% üî¥  
    ‚Ä¢ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 72

    ‚Äî

    üìå #6 –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥  
    ‚Ä¢ –ü–æ–ª—ë—Ç—ã: 1‚ÄØ900  
    ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5‚ÄØ100 —á  
    ‚Ä¢ –°—Ä. –≤—Ä–µ–º—è: 0.95 —á  
    ‚Ä¢ –†–æ—Å—Ç: +10% üü¢  
    ‚Ä¢ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 72

    ‚Äî

    üéØ #7 –ö–∞–∑–∞–Ω—å  
    ‚Ä¢ –ü–æ–ª—ë—Ç—ã: 1‚ÄØ800  
    ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5‚ÄØ100 —á  
    ‚Ä¢ –°—Ä. –≤—Ä–µ–º—è: 0.95 —á  
    ‚Ä¢ –†–æ—Å—Ç: +7% üü¢  
    ‚Ä¢ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 72

    ‚Äî

    üìà #8 –°–∞–º–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å  
    ‚Ä¢ –ü–æ–ª—ë—Ç—ã: 1‚ÄØ750  
    ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5‚ÄØ100 —á  
    ‚Ä¢ –°—Ä. –≤—Ä–µ–º—è: 0.95 —á  
    ‚Ä¢ –†–æ—Å—Ç: -2% üî¥  
    ‚Ä¢ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 72

    ‚Äî

    üìä #9 –ü–µ—Ä–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å  
    ‚Ä¢ –ü–æ–ª—ë—Ç—ã: 1‚ÄØ700  
    ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5‚ÄØ100 —á  
    ‚Ä¢ –°—Ä. –≤—Ä–µ–º—è: 0.95 —á  
    ‚Ä¢ –†–æ—Å—Ç: +9% üü¢  
    ‚Ä¢ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 72

    ‚Äî

    üåê #10 –ü–µ—Ä–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å  
    ‚Ä¢ –ü–æ–ª—ë—Ç—ã: 1‚ÄØ680  
    ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5‚ÄØ100 —á  
    ‚Ä¢ –°—Ä. –≤—Ä–µ–º—è: 0.95 —á  
    ‚Ä¢ –†–æ—Å—Ç: +9% üü¢  
    ‚Ä¢ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 72

    ‚Äî

    üåê #11 –ü–µ—Ä–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å  
    ‚Ä¢ –ü–æ–ª—ë—Ç—ã: 1‚ÄØ670  
    ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5‚ÄØ100 —á  
    ‚Ä¢ –°—Ä. –≤—Ä–µ–º—è: 0.95 —á  
    ‚Ä¢ –†–æ—Å—Ç: +9% üü¢  
    ‚Ä¢ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 72

    ‚Äî

    üåê #12 –ü–µ—Ä–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å  
    ‚Ä¢ –ü–æ–ª—ë—Ç—ã: 1‚ÄØ640  
    ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5‚ÄØ100 —á  
    ‚Ä¢ –°—Ä. –≤—Ä–µ–º—è: 0.95 —á  
    ‚Ä¢ –†–æ—Å—Ç: +9% üü¢  
    ‚Ä¢ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 72

    ‚Äî

    üåê #13 –ü–µ—Ä–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å  
    ‚Ä¢ –ü–æ–ª—ë—Ç—ã: 1‚ÄØ600  
    ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5‚ÄØ100 —á  
    ‚Ä¢ –°—Ä. –≤—Ä–µ–º—è: 0.95 —á  
    ‚Ä¢ –†–æ—Å—Ç: +9% üü¢  
    ‚Ä¢ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 72

    ‚Äî

    üåê #14 –ü–µ—Ä–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å  
    ‚Ä¢ –ü–æ–ª—ë—Ç—ã: 1‚ÄØ550  
    ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5‚ÄØ100 —á  
    ‚Ä¢ –°—Ä. –≤—Ä–µ–º—è: 0.95 —á  
    ‚Ä¢ –†–æ—Å—Ç: +9% üü¢  
    ‚Ä¢ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 72

    ‚Äî

    üåê #15 –ü–µ—Ä–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å  
    ‚Ä¢ –ü–æ–ª—ë—Ç—ã: 1‚ÄØ490  
    ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5‚ÄØ100 —á  
    ‚Ä¢ –°—Ä. –≤—Ä–µ–º—è: 0.95 —á  
    ‚Ä¢ –†–æ—Å—Ç: +9% üü¢  
    ‚Ä¢ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 72"""

    await callback_query.message.answer(text, parse_mode="HTML")
    await callback_query.answer()


@router.callback_query(F.data.startswith("export_json_"))
async def export_region_json(callback_query: CallbackQuery):
    region_id = int(callback_query.data.split("_")[-1])
    client = APIClient()
    
    try:
        stat_data = client.get_json_statistic(region_id)  
    except Exception as e:
        await callback_query.answer(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", show_alert=True)
        return

    json_bytes = json.dumps(stat_data, ensure_ascii=False, indent=2).encode("utf-8")

    
    file = BufferedInputFile(
        file=json_bytes,
        filename=f"flight_statistics_{region_id}.json"
    )

    

    await callback_query.message.answer_document(
        document=file,
        caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ–≥–∏–æ–Ω—É ID {region_id}"
    )
    await callback_query.answer()


@router.callback_query(F.data.startswith('trends_'))
async def send_trend_chart(callback_query: CallbackQuery):
    loading_msg: Message = await callback_query.message.answer("üìä –°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
    client = APIClient()
    region_id, type = int(callback_query.data.split('_')[1]), callback_query.data.split('_')[2]
    region = client.get_region(region_id).get('data')
    data = client.get_flights_by_type(type)

    await callback_query.message.answer_photo(data['photo'], caption=data['text'], reply_markup=get_organizations(region_id, type))
    await callback_query.answer()
    await loading_msg.delete()


@router.callback_query(F.data.startswith('export_'))
async def send_trend_chart_report(callback_query: CallbackQuery):
    loading_msg: Message = await callback_query.message.answer("üìä –°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
    region_id, type_report = callback_query.data.replace('export_trends_', '').split('_')
    client = APIClient()

    region = client.get_region(int(region_id)).get('data')
    name = region.get('fullname')

    try:
        stat_data = client.get_json_statistic(region_id)  
    except Exception as e:
        await callback_query.answer(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", show_alert=True)
        return

    json_bytes = json.dumps(stat_data, ensure_ascii=False, indent=2).encode("utf-8")

    if type_report == 'yur':
        name_type = 'legal_authority'
    elif type_report == 'fiz':
        name_type = 'private_person'
    else:
        name_type = 'all'

    file = BufferedInputFile(
        file=json_bytes,
        filename=f"flight_statistics_{region_id}_{name_type}.json"
    )

    
    await loading_msg.delete()
    await callback_query.message.answer_document(
        document=file,
        caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ–≥–∏–æ–Ω—É ID {region_id}"
    )
    await callback_query.answer()


@router.callback_query(F.data == "show_top_regions")
async def show_top_regions(callback_query: CallbackQuery):
    client = APIClient()
    top_names = [
        "–ú–æ—Å–∫–≤–∞",
        "–¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω",
        "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π",
        "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        "–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
        "–ö–∞–∑–∞–Ω—å",
        "–°–∞–º–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        "–ü–µ—Ä–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        "–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"
    ]

    text = client.format_top_regions_names_with_emojis(top_names)
    await callback_query.message.answer(text, parse_mode="HTML")
    await callback_query.answer()